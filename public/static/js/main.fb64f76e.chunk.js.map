{"version":3,"sources":["spaceXlogo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","launches","map","key","role","LAUNCH_QUERY","Launch","match","params","parseInt","variables","eachLaunch","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","Logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fb64f76e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spaceXlogo.697cc825.png\";","import React from 'react'\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({ launch: {flight_number, mission_name, launch_date_local, launch_success} }) {\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>Mission: <span className={classNames({\n            'text-success': launch_success,\n            'text-danger':  launch_success === false,\n            'text-secondary':  launch_success === null\n          })}>{mission_name}</span> </h4>\n          <p>Date: <Moment format=\"YYYY-MM-DD HH:MM\">{launch_date_local}</Moment></p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-secondary\" /> = Null\n      </p>\n    </div>\n  )\n}","import React, { Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n  query Launches {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nfunction Launches() {\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n    let launches = null;\n    if(data){\n      launches =  data.launches.map(launch => (\n                    <LaunchItem key={launch.flight_number} launch={launch} />\n                  ))\n    }\n    if(loading) launches =  <div className=\"spinner-border text-info\" role=\"status\">\n                              <span className=\"sr-only\">Loading...</span>\n                            </div>\n    if(error) launches = <h1 className=\"display-4 my-3\">{error}</h1>\n\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\" >Launches</h1>\n        <MissionKey />\n        {launches}\n      </Fragment>\n    );\n};\n\nexport default Launches;","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!){\n    launch(flight_number: $flight_number){\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local,\n      rocket{\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\n\nfunction Launch({match})  {\n\n  let { flight_number } = match.params;\n  flight_number = parseInt(flight_number);\n\n  const { loading, error, data } = useQuery(LAUNCH_QUERY, {\n    variables: {flight_number},\n  });\n\n  let eachLaunch = null;\n\n  if(data){\n    let {\n      mission_name,\n      launch_year,\n      launch_success,\n      launch_date_local,\n      rocket: {\n        rocket_id,\n        rocket_name,\n        rocket_type\n      }\n    } = data.launch;\n\n    if(launch_success){\n      launch_success = <span className=\"text-success\">Success</span>\n    } else if (launch_success === false){\n      launch_success = <span className=\"text-danger\">Fail</span>\n    } else {\n      launch_success = <span className=\"text-secondary\">Null</span>\n    }\n\n    eachLaunch =  <div>\n                    <h1 className=\"display-4 my-3\">\n                      <span className=\"text-dark\">Mission: </span>{mission_name}\n                    </h1>\n                    <h4 className=\"mb-3\">Launch Details</h4>\n                    <ul className=\"list-group\">\n                      <li className=\"list-group-item\">\n                        Flight Number: {flight_number}\n                      </li>\n                      <li className=\"list-group-item\">\n                        Launch Date: <Moment format=\"YYYY-MM-DD, HH:MM\">{launch_date_local}</Moment>\n                      </li>\n                      <li className=\"list-group-item\">\n                        Launch Status: {launch_success}\n                      </li>\n                    </ul>\n                    <h4 className=\"my-3\">Rocket Details</h4>\n                    <ul className=\"list-group\">\n                      <li className=\"list-group-item\">\n                        Rocket ID: {rocket_id}\n                      </li>\n                      <li className=\"list-group-item\">\n                        Rocket Name: {rocket_name}\n                      </li>\n                      <li className=\"list-group-item\">\n                        Rocket Type: {rocket_type}\n                      </li>\n                    </ul>\n                    <br/>\n                    <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                  </div>\n  }\n  if(loading) eachLaunch =  <div className=\"spinner-border text-info\" role=\"status\">\n                          <span className=\"sr-only\">Loading...</span>\n                        </div>\n  if(error) eachLaunch = <h1 className=\"display-4 my-3\">{error}</h1>\n\n\n  return (\n    <Fragment>\n      { eachLaunch }\n    </Fragment>\n  );\n};\n\nexport default Launch;","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport Logo from './spaceXlogo.png';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client} >\n    <Router>\n      <div className=\"container\">\n        <img src={Logo} alt=\"SpaceX\" style={{ width: \"20%\", display: \"block\", margin: \"auto\" }} />\n        <Route exact path=\"/\" component={Launches} />\n        <Route exact path=\"/launch/:flight_number\" component={Launch} />\n      </div>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}